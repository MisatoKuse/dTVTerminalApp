apply plugin: 'com.android.application'

android {
    //リリース作業時には★印の更新値を確認する事！

    compileSdkVersion 28
    buildToolsVersion "28.0.3"
    defaultConfig {
        applicationId "com.nttdocomo.android.tvterminalapp"
        minSdkVersion 19
        targetSdkVersion 28
        versionCode 25           //★バージョンコード. リリース毎に更新する事
        versionName "01.20."    //★メジャーバージョン.マイナーバージョン. リリース毎に更新する事

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        externalNativeBuild {
            cmake {
                cppFlags "-std=c++11"
                arguments "-DANDROID_ABI=armeabi",
                        "-DANDROID_STL=gnustl_static"
            }
        }
        ndk {
            abiFilters 'armeabi' //'armeabi-v7a'
        }
    }

    // 対象デバイスのリビジョン数値(下5桁目)
    // スマートフォンは"0", 今後タブレット対応によりアプリ派生する場合はタブレットは"1"となる
    // 中継アプリは"2"
    def revison_device_num = "0"

    // OSverを表すVersionNameのリビジョン数値(下3桁目) "2"固定
    def revison_osver_num = "2"

    // ★マイナーリリース毎にインクリメントするVersionNameのリビジョン数値(下2桁)
    // ※バージョンが上がったら0リセットすること
    def revison_end_num = "01"

    signingConfigs {
        dcmeval {
            storeFile file('keys/dcmEval20150128.keystore')
            storePassword 'spmode20100901'
            keyAlias 'dcmeval2048'
            keyPassword 'dcmeval2048'
            v2SigningEnabled false
        }
    }

    dexOptions {
        javaMaxHeapSize "2g"
        dexInProcess true
    }

    // versionNameSuffix(VersionNameリビジョン値)はbuilTypeおよびFlavorを加味し変える必要があるが、
    // 両方を参照して値変更する事がbuildValiantの仕組み上困難なので、ビルドバリエーション毎にBuildTypeを用意したうえで
    // 不要なFlavorとBuildTypeの組み合わせを後述のvariantFilterを使って無効化する.
    buildTypes {
        // 商用向き、未署名、debug・Log OFF
        unsigned_off {
            debuggable false
            jniDebuggable false
            minifyEnabled false
            versionNameSuffix revison_device_num + "0" + revison_osver_num + revison_end_num
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            externalNativeBuild {
                cmake {
                    cppFlags.add("-DENABLE_LOG_INFO")
                    cppFlags.add("-DENABLE_LOG_ERROR")
                    cFlags.add("-DENABLE_LOG_INFO")
                    cFlags.add("-DENABLE_LOG_ERROR")
                }
            }
        }
        // 商用向き、未署名、debug・Log ON
        unsigned_on {
            debuggable true
            jniDebuggable true
            minifyEnabled false
            versionNameSuffix revison_device_num + "1" + revison_osver_num + revison_end_num
            externalNativeBuild {
                cmake {
                    cppFlags.add("-DENABLE_LOG_DEBUG")
                    cppFlags.add("-DENABLE_LOG_INFO")
                    cppFlags.add("-DENABLE_LOG_ERROR")
                    cFlags.add("-DENABLE_LOG_DEBUG")
                    cFlags.add("-DENABLE_LOG_INFO")
                    cFlags.add("-DENABLE_LOG_ERROR")
                }
            }
        }
        // 商用向き、開発署名付、debug・Log OFF
        signed_off {
            debuggable false
            jniDebuggable false
            minifyEnabled false
            versionNameSuffix revison_device_num + "2" + revison_osver_num + revison_end_num
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.dcmeval
            externalNativeBuild {
                cmake {
                    cppFlags.add("-DENABLE_LOG_INFO")
                    cppFlags.add("-DENABLE_LOG_ERROR")
                    cFlags.add("-DENABLE_LOG_INFO")
                    cFlags.add("-DENABLE_LOG_ERROR")
                }
            }
        }
        // 商用向き、開発署名付、debug・Log ON
        signed_on {
            debuggable true
            jniDebuggable true
            minifyEnabled false
            versionNameSuffix revison_device_num + "3" + revison_osver_num + revison_end_num
            signingConfig signingConfigs.dcmeval
            externalNativeBuild {
                cmake {
                    cppFlags.add("-DENABLE_LOG_DEBUG")
                    cppFlags.add("-DENABLE_LOG_INFO")
                    cppFlags.add("-DENABLE_LOG_ERROR")
                    cFlags.add("-DENABLE_LOG_DEBUG")
                    cFlags.add("-DENABLE_LOG_INFO")
                    cFlags.add("-DENABLE_LOG_ERROR")
                }
            }
        }
        // 検証向き、未署名、debug・Log OFF
        _unsigned_off {
            debuggable false
            jniDebuggable false
            minifyEnabled false
            versionNameSuffix revison_device_num + "4" + revison_osver_num + revison_end_num
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            externalNativeBuild {
                cmake {
                    cppFlags.add("-DENABLE_LOG_INFO")
                    cppFlags.add("-DENABLE_LOG_ERROR")
                    cFlags.add("-DENABLE_LOG_INFO")
                    cFlags.add("-DENABLE_LOG_ERROR")
                }
            }
        }
        // 検証向き、未署名、debug・Log ON
        _unsigned_on {
            debuggable true
            jniDebuggable true
            minifyEnabled false
            versionNameSuffix revison_device_num + "5" + revison_osver_num + revison_end_num
            externalNativeBuild {
                cmake {
                    cppFlags.add("-DENABLE_LOG_DEBUG")
                    cppFlags.add("-DENABLE_LOG_INFO")
                    cppFlags.add("-DENABLE_LOG_ERROR")
                    cFlags.add("-DENABLE_LOG_DEBUG")
                    cFlags.add("-DENABLE_LOG_INFO")
                    cFlags.add("-DENABLE_LOG_ERROR")
                }
            }
        }
        // 検証向き、開発署名付、debug・Log OFF
        _signed_off {
            debuggable false
            jniDebuggable false
            minifyEnabled false
            versionNameSuffix revison_device_num + "6" + revison_osver_num + revison_end_num
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.dcmeval
            externalNativeBuild {
                cmake {
                    cppFlags.add("-DENABLE_LOG_INFO")
                    cppFlags.add("-DENABLE_LOG_ERROR")
                    cFlags.add("-DENABLE_LOG_INFO")
                    cFlags.add("-DENABLE_LOG_ERROR")
                }
            }
        }
        // 検証向き、開発署名付、debug・Log ON
        _signed_on {
            debuggable true
            jniDebuggable true
            minifyEnabled false
            versionNameSuffix revison_device_num + "7" + revison_osver_num + revison_end_num
            signingConfig signingConfigs.dcmeval
            externalNativeBuild {
                cmake {
                    cppFlags.add("-DENABLE_LOG_DEBUG")
                    cppFlags.add("-DENABLE_LOG_INFO")
                    cppFlags.add("-DENABLE_LOG_ERROR")
                    cFlags.add("-DENABLE_LOG_DEBUG")
                    cFlags.add("-DENABLE_LOG_INFO")
                    cFlags.add("-DENABLE_LOG_ERROR")
                }
            }
        }

    }

    sourceSets {
        main {
            aidl.srcDirs = [
                    'src/main/aidl'
            ]
            jniLibs.srcDirs = [
                    'libs'
            ]
            res.srcDirs =
                    [
                            'src/main/res/layout/launch',
                            'src/main/res/layout/home',
                            'src/main/res/layout/tvprogram',
                            'src/main/res/layout/video',
                            'src/main/res/layout/search',
                            'src/main/res/layout/ranking',
                            'src/main/res/layout/other',
                            'src/main/res/layout/player',
                            'src/main/res/layout',
                            'src/main/res'
                    ]
        }
    }
    externalNativeBuild {
        cmake {
            path 'CMakeLists.txt'
        }
    }

    // Flavorを接続先環境によって分ける
    productFlavors {
        // 商用
        _com_ {
        }
        // 検証
        _test_ {
        }
        // ローカルサーバ
        local_ {
        }
    }

    // 出力apkファイル名をバリエーション毎に設定
    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            if (output.outputFile != null && output.outputFile.name.endsWith('.apk')) {
                def newName = "TVTerminal_local_signed_on.apk"
                if (variant.flavorName == "_com_") {
                    if (variant.buildType.name == "unsigned_off") {
                        newName = "TVTerminal.apk"
                    } else if (variant.buildType.name == "unsigned_on") {
                        newName = "TVTerminal_unsigned_on.apk"
                    } else if (variant.buildType.name == "signed_off") {
                        newName = "TVTerminal_signed.apk"
                    } else if (variant.buildType.name == "signed_on") {
                        newName = "TVTerminal_signed_on.apk"
                    }
                } else if (variant.flavorName == "_test_"){
                    if (variant.buildType.name == "_unsigned_off") {
                        newName = "TVTerminal_test_unsigned.apk"
                    } else if (variant.buildType.name == "_unsigned_on") {
                        newName = "TVTerminal_test_unsigned_on.apk"
                    } else if (variant.buildType.name == "_signed_off") {
                        newName = "TVTerminal_test_signed.apk"
                    } else if (variant.buildType.name == "_signed_on") {
                        newName = "TVTerminal_test_signed_on.apk"
                    }
                }
                outputFileName = newName
            }
        }
    }
    flavorDimensions "default"

    // 不要なValiantを無効化
    variantFilter { variant ->
        def fnames = variant.flavors*.name
        def bname = buildType.name
        // デフォルトのBuildTypeは無効化(混乱するため独自バリエーションのみに絞る)
        if (bname == "debug" || bname == "release" || bname == "test") {
            setIgnore(true)
        }
        // 商用向きの不要な組み合わせを無効化.
        if (fnames.contains("_com_")) {
            if(bname == "_unsigned_off" || bname == "_unsigned_on" || bname == "_signed_off" || bname == "_signed_on") {
                setIgnore(true)
            }
        }
        // 検証向きの不要な組み合わせを無効化.
        if (fnames.contains("_test_")) {
            if(bname == "unsigned_off" || bname == "unsigned_on" || bname == "signed_off" || bname == "signed_on") {
                setIgnore(true)
            }
        }
        // ローカルサーバ向きは署名付きデバッグ版のみに絞る
        if (fnames.contains("local_") && bname != "signed_on") {
            setIgnore(true)
        }
    }
}

repositories { flatDir { dirs 'libs' } }

configurations {
    local_Signed_onCompile{}
    _com_Signed_onCompile{}
    _com_Unsigned_onCompile{}
    _test__signed_onCompile{}
    _test__unsigned_onCompile{}
    _com_Signed_offCompile{}
    _com_Unsigned_offCompile{}
    _test__signed_offCompile{}
    _test__unsigned_offCompile{}
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    androidTestImplementation('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })

    //Googleアナリティクス用ライブラリ
    //noinspection GradleDependency
    implementation 'com.google.android.gms:play-services-analytics:10.0.1'
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    implementation 'com.android.support:support-v4:28.0.0'
    implementation 'com.android.support:design:28.0.0'
    testImplementation 'junit:junit:4.12'

    //DiXiM SecurePlayer SDK Debug Version
    local_Signed_onCompile(name: 'dixim-android-player-lib-debug', ext: 'aar')
    local_Signed_onCompile(name: 'dixim-android-player-secure-nativecodec-debug', ext: 'aar')
    local_Signed_onCompile(name: 'dixim-android-player-secure-openmaxal-debug', ext: 'aar')
    local_Signed_onCompile(name: 'dixim-android-util2-debug', ext: 'aar')

    _com_Signed_onCompile(name: 'dixim-android-player-lib-debug', ext: 'aar')
    _com_Signed_onCompile(name: 'dixim-android-player-secure-nativecodec-debug', ext: 'aar')
    _com_Signed_onCompile(name: 'dixim-android-player-secure-openmaxal-debug', ext: 'aar')
    _com_Signed_onCompile(name: 'dixim-android-util2-debug', ext: 'aar')

    _com_Unsigned_onCompile(name: 'dixim-android-player-lib-debug', ext: 'aar')
    _com_Unsigned_onCompile(name: 'dixim-android-player-secure-nativecodec-debug', ext: 'aar')
    _com_Unsigned_onCompile(name: 'dixim-android-player-secure-openmaxal-debug', ext: 'aar')
    _com_Unsigned_onCompile(name: 'dixim-android-util2-debug', ext: 'aar')

    _test__signed_onCompile(name: 'dixim-android-player-lib-debug', ext: 'aar')
    _test__signed_onCompile(name: 'dixim-android-player-secure-nativecodec-debug', ext: 'aar')
    _test__signed_onCompile(name: 'dixim-android-player-secure-openmaxal-debug', ext: 'aar')
    _test__signed_onCompile(name: 'dixim-android-util2-debug', ext: 'aar')

    _test__unsigned_onCompile(name: 'dixim-android-player-lib-debug', ext: 'aar')
    _test__unsigned_onCompile(name: 'dixim-android-player-secure-nativecodec-debug', ext: 'aar')
    _test__unsigned_onCompile(name: 'dixim-android-player-secure-openmaxal-debug', ext: 'aar')
    _test__unsigned_onCompile(name: 'dixim-android-util2-debug', ext: 'aar')

    //DiXiM SecurePlayer SDK Release Version
    _com_Signed_offCompile(name: 'dixim-android-player-lib', ext: 'aar')
    _com_Signed_offCompile(name: 'dixim-android-player-secure-nativecodec', ext: 'aar')
    _com_Signed_offCompile(name: 'dixim-android-player-secure-openmaxal', ext: 'aar')
    _com_Signed_offCompile(name: 'dixim-android-util2', ext: 'aar')

    _com_Unsigned_offCompile(name: 'dixim-android-player-lib', ext: 'aar')
    _com_Unsigned_offCompile(name: 'dixim-android-player-secure-nativecodec', ext: 'aar')
    _com_Unsigned_offCompile(name: 'dixim-android-player-secure-openmaxal', ext: 'aar')
    _com_Unsigned_offCompile(name: 'dixim-android-util2', ext: 'aar')

    _test__signed_offCompile(name: 'dixim-android-player-lib', ext: 'aar')
    _test__signed_offCompile(name: 'dixim-android-player-secure-nativecodec', ext: 'aar')
    _test__signed_offCompile(name: 'dixim-android-player-secure-openmaxal', ext: 'aar')
    _test__signed_offCompile(name: 'dixim-android-util2', ext: 'aar')

    _test__unsigned_offCompile(name: 'dixim-android-player-lib', ext: 'aar')
    _test__unsigned_offCompile(name: 'dixim-android-player-secure-nativecodec', ext: 'aar')
    _test__unsigned_offCompile(name: 'dixim-android-player-secure-openmaxal', ext: 'aar')
    _test__unsigned_offCompile(name: 'dixim-android-util2', ext: 'aar')

    //SSLチェックライブラリ
    implementation files('libs/ocsplib3.0.jar')
}
